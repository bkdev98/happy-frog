/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bkdev;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.Timer;

public class Renderer extends javax.swing.JPanel implements ActionListener, MouseListener {
    private final int WIDTH = 1200, HEIGHT = 800;
    private int yCount, ticks;
    private ArrayList<JButton> columns;
    private Random rand;
    private boolean start = true;
    
    public Renderer() {
        initComponents();
        
        this.addMouseListener(this);
        
        rand = new Random();
        
        Timer timer = new Timer(20, this);
        
        columns = new ArrayList<JButton>();
        
        addColumn(true);
        addColumn(true);
        addColumn(true);
        addColumn(true);
        
        timer.start();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        ticks++;
        int speed = 10;
        
        for (int i = 0; i < columns.size(); i++) {
            JButton column  = columns.get(i);
            column.setBounds(column.getX() - speed, column.getY(), column.getWidth(), column.getHeight());
        }
        
        if (ticks % 2 == 0 && yCount < 15) {
            yCount += 2;
        }
        
        frog.setLocation(frog.getX(), frog.getY() + yCount);
        
        for(JButton column: columns) {
            this.add(column);
        }
        
    }
    
    private void jump() {
        if (frog.getY() > 800) {
            yCount = 0;
            frog.setLocation(frog.getX(), 800 - frog.getHeight() * 2);
        }
        if (yCount > 0) {
            yCount = 0;
        }
        
        yCount -= 10;
    }
    
    private void addColumn(boolean start) {
        int space = 300;
        int width = 100;
        int height = 50 + rand.nextInt(300);
        
        if (start) {
            JButton topColumn = new JButton();
            System.out.println((WIDTH + width + columns.size() * 300) + " " + (HEIGHT - height) + " " + width + " " + height);
            topColumn.setBounds(WIDTH + width + columns.size() * 300, HEIGHT - height, width, height);
            columns.add(topColumn);
            JButton botColumn = new JButton();
            System.out.println((WIDTH + width + (columns.size() - 1) * 300) + " " + 0 + " " + width + " " + (HEIGHT - height - space));
            botColumn.setBounds(WIDTH + width + (columns.size() - 1) * 300, 0, width, HEIGHT - height - space);
            columns.add(botColumn);
        } else {
            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frog = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(60, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(1200, 800));
        setSize(new java.awt.Dimension(1200, 800));
        setLayout(null);

        frog.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        frog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        frog.setText("FROG");
        add(frog);
        frog.setBounds(576, 371, 64, 30);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel frog;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        this.jump();
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

}
